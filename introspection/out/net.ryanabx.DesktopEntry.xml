
<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
 "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node>
  <interface name="org.freedesktop.DBus.Properties">
    <method name="Get">
      <arg name="interface_name" type="s" direction="in"/>
      <arg name="property_name" type="s" direction="in"/>
      <arg type="v" direction="out"/>
    </method>
    <method name="Set">
      <arg name="interface_name" type="s" direction="in"/>
      <arg name="property_name" type="s" direction="in"/>
      <arg name="value" type="v" direction="in"/>
    </method>
    <method name="GetAll">
      <arg name="interface_name" type="s" direction="in"/>
      <arg type="a{sv}" direction="out"/>
    </method>
    <!--
     Emits the `org.freedesktop.DBus.Properties.PropertiesChanged` signal.
     -->
    <signal name="PropertiesChanged">
      <arg name="interface_name" type="s"/>
      <arg name="changed_properties" type="a{sv}"/>
      <arg name="invalidated_properties" type="as"/>
    </signal>
  </interface>
  <interface name="org.freedesktop.DBus.Peer">
    <method name="Ping">
    </method>
    <method name="GetMachineId">
      <arg type="s" direction="out"/>
    </method>
  </interface>
  <interface name="org.freedesktop.DBus.Introspectable">
    <method name="Introspect">
      <arg type="s" direction="out"/>
    </method>
  </interface>
  <interface name="net.ryanabx.DesktopEntry">
    <!--
     Register a new application entry. The utf-8 encoded `entry` will be validated to be conformant with the
     [Desktop Entry Specification](https://specifications.freedesktop.org/desktop-entry-spec/latest/)
     Returns an error if the entry failed to register.
     -->
    <method name="RegisterEntry">
      <arg name="appid" type="s" direction="in"/>
      <arg name="entry" type="s" direction="in"/>
    </method>
    <!--
     Register a new application icon. The icon data should be valid .png or .svg data, and the icon type should be
     0 for .png, 1 for .svg. The icon name is the name desktop entries reference when using the icon. The method will
     returns true if successful, false otherwise.
     -->
    <method name="RegisterIcon">
      <arg name="name" type="s" direction="in"/>
      <arg name="data" type="ay" direction="in"/>
    </method>
    <!--
     signal for when an entry is added or destroyed. subscribe to this if you would like to manually
     handle refreshing the xdg desktop database, i.e. by using `update-desktop-database`
     this is normally handled automatically by desktop-entry-daemon
     -->
    <signal name="EntryChanged">
      <arg name="appid" type="s"/>
    </signal>
    <!--
     signal for when an icon is added or destroyed. subscribe to this if you would like to manually
     handle refreshing the xdg desktop database, i.e. by using `update-desktop-database`
     this is normally handled automatically by desktop-entry-daemon
     -->
    <signal name="IconChanged">
      <arg name="icon_name" type="s"/>
    </signal>
    <!--
     register the sender as a change handler for icons and entries. this inhibits the behavior
     of desktop-entry-daemon refreshing the database whenever a new icon or entry is added or
     removed. along with this, if you'd like to watch changes, subscribe to `icon_changed` and
     `entry_changed`
     -->
    <method name="RegisterChangeHandler">
    </method>
  </interface>
</node>

